<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 柚紫</title>
    <link>https://kehux.win/tags/tools/</link>
    <description>Recent content in Tools on 柚紫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Mar 2019 16:53:19 +0800</lastBuildDate>
    
	<atom:link href="https://kehux.win/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostCss</title>
      <link>https://kehux.win/posts/postcss/</link>
      <pubDate>Thu, 14 Mar 2019 16:53:19 +0800</pubDate>
      
      <guid>https://kehux.win/posts/postcss/</guid>
      <description>PostCSS 为什么要使用PostCss css规范在浏览器兼容性方面一直存在各种各样的问题，不同浏览器在css规范的实现方面的进度也存在很大差异。
PostCSS介绍 PostCSS 是一个允许使用 JS 插件转换样式的工具。
 检查（lint）你的 CSS 支持 CSS Variables 和 Mixins 编译尚未被浏览器广泛支持的先进的 CSS 语法 内联图片  使用方法  在你的构建工具中查找并添加PostCSS扩展 选择插件并将他们添加到你的PostCSS处理队列中  在 webpack.config.js 里使用 postcss-loader : { loader: &#39;postcss-loader&#39; }   创建postcss.config.js   module.exports = { plugins: [ require(&#39;precss&#39;), require(&#39;autoprefixer&#39;) ] }  ​
提前使用先进的CSS特性 autoprefixer 添加了vender浏览器前缀。 Autoprefixer是postCSS的一个插件用来转换css并且根据css规则填充属性前缀。</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>https://kehux.win/posts/graphql/</link>
      <pubDate>Thu, 14 Mar 2019 16:52:19 +0800</pubDate>
      
      <guid>https://kehux.win/posts/graphql/</guid>
      <description>GraphQL 入门 GraphQL是一个用于API的查询语言，使用你自己定义的类型系统在服务器端进行查询。
 一旦GraphQL运行，它可以用来发送GraphQL查询去验证和执行。
 GraphQL的实现：
 使用Nodejs实现GraphQL服务器   mkdir test &amp;amp;&amp;amp; cd ./test npm install express --save npm install babel --save touch ./server.js touch ./index.js   index.js: require(&#39;babel/register&#39;); require(&#39;./server.js&#39;);   //server.js import express from &#39;express&#39;; let app = express(); let PORT = 3000; app.post(&#39;/graphql&#39;, (req, res) =&amp;gt; { res.send(&#39;Hello!&#39;); }); let server = app.listen(PORT, function() { let host = server.address().address; let port = server.address().port; console.</description>
    </item>
    
  </channel>
</rss>